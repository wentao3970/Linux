diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index f0b1709..ae998ce 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -343,6 +343,7 @@
 332	common	statx			__x64_sys_statx
 333	common	io_pgetevents		__x64_sys_io_pgetevents
 334	common	rseq			__x64_sys_rseq
+335	common	s2_encrypt		__x64_sys_s2_encrypt

 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 5c1a093..ed9d6b2 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1282,4 +1282,6 @@ static inline long ksys_truncate(const char __user *pathname, loff_t length)
 	return do_sys_truncate(pathname, length);
 }

+asmlinkage long sys_s2_encrypt(char *prim, int key);
+
 #endif
diff --git a/kernel/Makefile b/kernel/Makefile
index 04bc07c..3070e28 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -10,7 +10,8 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o smpboot.o ucount.o
+	    async.o range.o smpboot.o ucount.o \
+	    s2_encrypt.o

 obj-$(CONFIG_MODULES) += kmod.o
 obj-$(CONFIG_MULTIUSER) += groups.o
diff --git a/kernel/s2_encrypt.c b/kernel/s2_encrypt.c
new file mode 100644
index 0000000..4618081
--- /dev/null
+++ b/kernel/s2_encrypt.c
@@ -0,0 +1,41 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+
+char* __sys_s2_encrypt(char *prim, int key){
+  int i,n;
+  char code[100];
+  char temp_char,trans_char;
+  int temp_num,trans_num;
+  int len = 0;
+
+  while(prim[len]!='\0'){
+        len++;
+      }
+
+  for(i = 0; i<len; i++) {
+      temp_char = prim[i]; //Consider about the corresponding number of character
+      if (temp_char <= 'z' && temp_char >= 'a')
+          temp_num = temp_char - 'a' + 1;
+      else if (temp_char <= 'Z' && temp_char >= 'A')
+          temp_num = temp_char - 'A' + 27;
+
+      trans_num = (temp_num+ key) % 52;
+
+      if (trans_num > 26 && trans_num <= 52) //Transform number to character
+          trans_char = 'A' + trans_num - 27;
+      else if (trans_num > 0 && trans_num <= 26)
+          trans_char = 'a' + trans_num - 1;
+
+      code[i] = trans_char;
+  }
+
+  code[len] = '\0';
+
+  printk("The encrypted string is:\t%s\n",code);
+  return 0;
+}
+
+SYSCALL_DEFINE2(s2_encrypt, char *, str, int, key){
+  return __sys_s2_encrypt(str, key);
+}
